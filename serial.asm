;GEORGE CHIRTOACA: This are COM Rx/Tx routines by Mihai Gaitos, from here http://hawk.ro/stories/hc/hc_serial_en.html .
;They work with 19200 theoretical speed.
;The BASIC commands are reliable at 4800 PC2HC and 9600 HC2PC theoretical speed.
		
CBAUD	EQU	10	; CBAUD for 19200
;CBAUD	EQU	24	; CBAUD for 9600			


; ACTUAL RECEIVE CHAR ROUTINE (CHAR IN D, A=0 IF OK, -1 IF T/O)
; A=1 IF FRAMING ERROR
; USES BC,D _DOES NOT USE E!_
SERRXI::
	LD	BC,0000		; TIMEOUT
	LD	A,30H		; ASSERT RTS
	OUT	(0EFH),A

	; WAIT FOR START
SERWSL:	
	DEC	BC
	XOR	A
	CP	B
	JR	NZ,SERWS
	CP	C
	JR	Z,SERRTO	; TIMEOUT
SERWS:	IN	A,(0F7H)	; GET LINE STATUS
	BIT	7,A
	JR	Z,SERWSL	; IF 0 THEN WAIT SOME MORE

; WE GOT START; DELAY BY 3/2 BITS TO ARRIVE IN THE MIDDLE
; OF BIT 0
	LD	B,CBAUD / 2 + CBAUD
	LD	C,8		; 8 DATA BITS

; GET AND SHIFT BITS
SERRL:
	DJNZ	SERRL		; 13*B-5
	NOP			; 4 (TIMING)
	NOP			; 4 (TIMING)
	NOP			; 4 (TIMING)
	IN	A,(0F7H)	; 11
	RLA			; 4
	RR	D		; 8
	LD	B,CBAUD		; 7
	DEC	C		; 4
	JR	NZ,SERRL	; 12

; WE ARE NOW AT LAST BIT. DEASSERT RTS AND WAIT
; FOR THE LINE TO GO IDLE. IF LAST BIT IS 1 THIS WILL CAUSE
; IMMEDIATE EXIT BUT IT IS NOT A PROBLEM SINCE LINE WILL REMAIN
; IDLE UNTIL NEXT START BIT
	LD	A,20H		; DEASSERT RTS
	OUT	(0EFH),A

	LD	B,CBAUD		; TIMEOUT
	; WAIT FOR STOP, SIMILAR TO WAIT FOR START
SERWIL:	
	DEC	B
	JR	Z,SERRTF
SERWI:	IN	A,(0F7H)	; GET LINE STATUS
	BIT	7,A
	JR	NZ,SERWIL	; IF NOT IDLE WAIT SOME MORE

; RECEIVE ENDED AND LINE IS IDLE
	LD	A,D
	CPL			; INVERT BITS
	LD	D,A
	XOR	A		; 0 = SUCCESS
	RET

; TIMEOUT
SERRTO:
	LD	A,0FFH
	RET	

; FRAMING (STOP NOT RECEIVED) ERROR
SERRTF:
	LD	A,01H
	RET	



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SERRB::
; RECEIVE BLOCK (ADDR IN HL, BYTE COUNT IN BC)
; BITMAPPED OPTIONS IN E:
; XXXXXXIT
; I SET = leave Interrupts disabled at exit
; T SET = return after Timeout
; EXIT: A=0 SUCCESS, A=FF TIMEOUT, A=1 FRAMING ERROR
; BC=NUMBER OF BYTES RECEIVED
; HL=POINTER TO ADDRESS OF LAST RECEIVED BYTE + 1
	DI
	PUSH	BC		; NEEDED TO RETURN COUNT
				; OF RECEIVED BYTES

SERRBL:
	PUSH	BC
	CALL	SERRXI
	POP	BC
	OR	A
	JR	NZ,SERRBT	; CHECK TIMEOUT
	LD	(HL),D
	INC	HL
	DEC	BC
	XOR	A
	CP	B
	JR	NZ,SERRBL
	CP	C
	JR	NZ,SERRBL
; FULL RECEIVE
	POP	BC		; RESTORE BYTE COUNT

SERRBX:				; EXIT
	BIT	1,E
	RET	NZ
	EI
	RET

SERRBT:
	CP	1		; FRAMING ERROR ALWAYS ABORTS
	JR	Z,SERRBC	
	BIT	0,E
	JR	Z,SERRBL

SERRBC:	; CALCULATE NO. OF BYTES RECEIVED
	EX	DE,HL		; PRESERVE HL
	POP	HL		; GET INITIAL COUNT
	SCF
	CCF
	SBC	HL,BC		; SUBSTRACT REMAINING
	LD	B,H
	LD	C,L		; BC = COUNT
	EX	DE,HL		; RESTORE HL

	JR	SERRBX

SERRX::
; RECEIVE CHAR WRAPPER (WRT INTERRUPTS), SINCE RECEIVE BLOCK
; MUST MAKE MULTIPLE RX CALLS W/O ENABLING INTERRUPTS
; CHAR IN D; A=0 IF SUCCESS; A=FF IF TIMEOUT
	DI
	CALL	SERRXI
	EI
	RET
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SEND BLOCK (ADDR IN HL, BYTE COUNT IN BC)
SERTB::
	LD	A,(HL)
	PUSH	BC
		CALL	SERTX
	POP	BC
	INC	HL
	DEC BC
	LD	A, B
	OR	C
	JR	NZ, SERTB
	RET

; SEND CHAR ROUTINE
SERTX::
	CPL		; ENSURE CORRECT BIT POLARITY ON WIRE
	LD	D,A	; WILL SHIFT FROM D
	DI		; HC CP/M SEEMS TO MESS WITH PORTS...
	LD	A,01H
	OUT	(0F7H),A; ENSURE SERIAL, NOT "NETWORK"
	LD	E,20H	; PORT MASK
	LD	C,09H	; 1 START+8 DATA BITS
	LD	A,1
	JP	SBIT
	
SHLOOP:	XOR	A		; 4
	SRL	D		; 8
	RLA			; 4
SBIT:	
	OR	E		; 4
	OUT	(0EFH),A	; 11
	LD	B,CBAUD		; 7
SBITDL:
	DJNZ	SBITDL		; 13*B-5
	NOP			; 4 (TIMING)
	DEC	C		; 4
	JR	NZ,SHLOOP	; 12
; STOP BIT
	LD	A,20H
	OUT	(0EFH),A
	LD	B,CBAUD
STOPL:	DJNZ	STOPL
	EI
	RET	